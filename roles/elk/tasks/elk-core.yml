---
# tasks file for elk core setup

# #################################### Create Directories            ####################################

- name: "ELK | Create docker elk directory"
  file:
    path: "{{  docker_config_dir  }}"
    state: directory
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
    recurse: yes
  tags:
    - prep
    - elk

- name: "ELK | Create local cert volume directory"
  file:
    path: "{{docker_config_dir}}/volumes/{{certs_data_dir}}"
    state: directory
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
    recurse: yes
  when: certs_mount_type == "local"
  tags:
    - prep
    - elk

- name: "ELK | Create local elastic volume directory"
  file:
    path: "{{docker_config_dir}}/volumes/{{elastic_data_dir}}"
    state: directory
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
    recurse: yes
  when: elastic_mount_type == "local"
  tags:
    - prep
    - elk

- name: "ELK | Create local kibana volume directory"
  file:
    path: "{{docker_config_dir}}/volumes/{{kibana_data_dir}}"
    state: directory
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
    recurse: yes
  when: kibana_mount_type == "local"
  tags:
    - prep
    - elk

- name: "ELK | Create local logstash volume directory"
  file:
    path: "{{docker_config_dir}}/volumes/{{logstash_data_dir}}"
    state: directory
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
    recurse: yes
  when: logstash_mount_type == "local"
  tags:
    - prep
    - elk

- name: "ELK | Create logstash directory"
  file:
    path: "{{docker_config_dir}}/logstash"
    state: directory
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
    recurse: yes
  tags:
    - prep
    - elk

# #################################### Copy config & compose file(s) ####################################

- name: "ELK | Copy docker compose files"
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
    lstrip_blocks: yes
  loop:
    - { src: "../templates/compose.yaml.j2", dest: "{{docker_config_dir}}/{{docker_file}}" }
    - { src: '../templates/docker-elk.yaml.j2', dest: "{{docker_config_dir}}/docker-elk.yaml" }
  tags:
    - prep
    - elk

- name: "ELK | Copy logstash.conf"
  template:
    src: templates/logstash.conf.j2
    dest: "{{docker_config_dir}}/logstash/logstash.conf"
    owner: "{{ docker_user }}"
    group: "{{ docker_group }}"
    mode: 0775
  tags:
    - prep
    - elk

# #################################### Pull Images                   ####################################
- name: ELK | Pull images
  community.docker.docker_compose_v2_pull:
    project_src: "{{docker_config_dir}}/"
    files:
      - docker-elk.yaml
  when: not ansible_os_family == "Darwin"
  tags:
    - start
    - elk    

- name: "ELK | MACOS | Pull images"
  community.docker.docker_compose_v2:
    project_src: "{{docker_config_dir}}/"
    files:
      - docker-elk.yaml
    profiles: elk
    docker_cli: /usr/local/bin/docker
  when: ansible_os_family == "Darwin"
  failed_when: false # This is a workaround for the issue with the docker-compose module on MacOS
  tags:
    - start
    - elk

# #################################### Start Containers              ####################################

- name: "ELK | Create and start Elasticsearch Services"
  community.docker.docker_compose_v2:
    project_src: "{{docker_config_dir}}/"
    files:
      - docker-elk.yaml
    profiles: elk
    wait: true
    wait_timeout: 300 # 5min timout
  when: not ansible_os_family == "Darwin"
  tags:
    - start
    - elk

- name: "ELK | MACOS | Create and start Elasticsearch Services"
  community.docker.docker_compose_v2:
    project_src: "{{docker_config_dir}}/"
    files:
      - docker-elk.yaml
    profiles: elk
    docker_cli: /usr/local/bin/docker
    wait: true
    wait_timeout: 600 # 5min timout
  when: ansible_os_family == "Darwin"
  failed_when: false # This is a workaround for the issue with the docker-compose module on MacOS
  tags:
    - start
    - elk

- name: "ELK | Wait for port {{ kibana_port }} to become open on the host"
  ansible.builtin.wait_for:
    port: "{{ kibana_port }}"
    timeout: 600
    sleep: 5
  tags:
    - start
    - elk

# #################################### Configure Containers          ####################################

# This is quite useful: https://curlconverter.com/ansible/
- name: "ELK | Import kibana's dashboard "
  ansible.builtin.uri:
    url: "http://{{ docker_host }}:{{ kibana_port }}/api/saved_objects/_import?overwrite=true"
    method: "POST"
    user: "{{ elk_passwords.kibana.user }}"
    password: "{{ elk_passwords.kibana.password }}"
    force_basic_auth: yes
    validate_certs: false
    body:
      file:
        filename: "files/dx_dashboard_{{ kibana_version }}.ndjson"
    body_format: form-multipart
    headers:
      Kbn-xsrf: kibana
  register: result
  failed_when: False
  tags:
    - start
    - prep
    - elk





